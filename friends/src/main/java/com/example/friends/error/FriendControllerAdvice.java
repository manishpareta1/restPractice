package com.example.friends.error;

import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.xml.bind.ValidationException;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@ControllerAdvice
public class FriendControllerAdvice {

    /**
     * This method is used to handle the exception generated by create() method.
     * @param ve
     * @return ErrorMessage
     * Used @ResponseBody to convert errormessage object in json
     * Used @ResponseStatus to return the error type for the handler exception
     */
    @ResponseBody
    @ExceptionHandler(ValidationException.class)
    ErrorMessage exeptionHandler(ValidationException ve){
        return new ErrorMessage("400", ve.getMessage(), new Date());
    }

    /**
     * This method will catch MethodArgumentNotValidException exception thrown by post and put method
     * it will hadle the case when first and last name is null.
     * @ResponseBody is used to return user defined data type in error response
     * @param
     * @return
     */
    @ResponseBody
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    List<FieldErrorMessage> exceptionHandleForArg(MethodArgumentNotValidException me){
        List<FieldError> fieldErrorList = me.getBindingResult().getFieldErrors();
        List<FieldErrorMessage> fieldErrorMessages = fieldErrorList
                .stream()
                .map(fieldError ->
                        new FieldErrorMessage(fieldError.getField(), fieldError.getDefaultMessage(), new Date()))
                .collect(Collectors.toList());

        return fieldErrorMessages;
    }
}
